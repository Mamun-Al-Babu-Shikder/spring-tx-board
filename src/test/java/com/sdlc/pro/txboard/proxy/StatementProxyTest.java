package com.sdlc.pro.txboard.proxy;

import com.sdlc.pro.txboard.listener.TransactionPhaseListener;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class StatementProxyTest {

    private static final String TEST_SQL = "TEST SQL QUERY";
    private static final int TEST_ROW_COUNT = 5;
    private static final long TEST_LARGE_ROW_COUNT = 100L;
    private static final int[] TEST_COLUMN_INDEXES = {1, 2};
    private static final String[] TEST_COLUMN_NAMES = {"id", "name"};

    private Statement mockStatement;
    private TransactionPhaseListener mockListener;
    private StatementProxy statementProxy;
    private ResultSet mockResultSet;

    @BeforeEach
    void setUp() {
        mockStatement = mock(Statement.class);
        mockListener = mock(TransactionPhaseListener.class);
        mockResultSet = mock(ResultSet.class);
        statementProxy = new StatementProxy(mockStatement, mockListener);
    }


    @Test
    void testExecuteQuery_ShouldNotifyListener_AndDelegate() throws SQLException {
        when(mockStatement.executeQuery(TEST_SQL)).thenReturn(mockResultSet);
        ResultSet result = statementProxy.executeQuery(TEST_SQL);
        verify(mockListener).executedQuery(TEST_SQL);
        verify(mockStatement).executeQuery(TEST_SQL);
        assertEquals(mockResultSet, result, "The returned ResultSet should be the one from the delegate.");
    }

    @Test
    void testExecuteUpdate_String_ShouldNotifyListener_AndDelegate() throws SQLException {
        when(mockStatement.executeUpdate(TEST_SQL)).thenReturn(TEST_ROW_COUNT);
        int result = statementProxy.executeUpdate(TEST_SQL);
        verify(mockListener).executedQuery(TEST_SQL);
        verify(mockStatement).executeUpdate(TEST_SQL);
        assertEquals(TEST_ROW_COUNT, result);
    }

    @Test
    void testExecute_String_ShouldNotifyListener_AndDelegate() throws SQLException {
        when(mockStatement.execute(TEST_SQL)).thenReturn(true);
        boolean result = statementProxy.execute(TEST_SQL);
        verify(mockListener).executedQuery(TEST_SQL);
        verify(mockStatement).execute(TEST_SQL);
        assertTrue(result);
    }

    @Test
    void testAddBatch_ShouldNotifyListener_AndDelegate() throws SQLException {
        statementProxy.addBatch(TEST_SQL);
        verify(mockListener).executedQuery(TEST_SQL);
        verify(mockStatement).addBatch(TEST_SQL);
    }

    @Test
    void testExecuteUpdate_WithAutoGeneratedKeys_ShouldNotifyListener_AndDelegate() throws SQLException {
        when(mockStatement.executeUpdate(TEST_SQL, Statement.RETURN_GENERATED_KEYS)).thenReturn(TEST_ROW_COUNT);
        int result = statementProxy.executeUpdate(TEST_SQL, Statement.RETURN_GENERATED_KEYS);
        verify(mockListener).executedQuery(TEST_SQL);
        verify(mockStatement).executeUpdate(TEST_SQL, Statement.RETURN_GENERATED_KEYS);
        assertEquals(TEST_ROW_COUNT, result);
    }

    @Test
    void testExecuteUpdate_WithColumnIndexes_ShouldNotifyListener_AndDelegate() throws SQLException {
        when(mockStatement.executeUpdate(TEST_SQL, TEST_COLUMN_INDEXES)).thenReturn(TEST_ROW_COUNT);
        int result = statementProxy.executeUpdate(TEST_SQL, TEST_COLUMN_INDEXES);
        verify(mockListener).executedQuery(TEST_SQL);
        verify(mockStatement).executeUpdate(TEST_SQL, TEST_COLUMN_INDEXES);
        assertEquals(TEST_ROW_COUNT, result);
    }

    @Test
    void testExecuteUpdate_WithColumnNames_ShouldNotifyListener_AndDelegate() throws SQLException {
        when(mockStatement.executeUpdate(TEST_SQL, TEST_COLUMN_NAMES)).thenReturn(TEST_ROW_COUNT);
        int result = statementProxy.executeUpdate(TEST_SQL, TEST_COLUMN_NAMES);
        verify(mockListener).executedQuery(TEST_SQL);
        verify(mockStatement).executeUpdate(TEST_SQL, TEST_COLUMN_NAMES);
        assertEquals(TEST_ROW_COUNT, result);
    }

    @Test
    void testExecute_WithAutoGeneratedKeys_ShouldNotifyListener_AndDelegate() throws SQLException {
        when(mockStatement.execute(TEST_SQL, Statement.RETURN_GENERATED_KEYS)).thenReturn(true);
        boolean result = statementProxy.execute(TEST_SQL, Statement.RETURN_GENERATED_KEYS);
        verify(mockListener).executedQuery(TEST_SQL);
        verify(mockStatement).execute(TEST_SQL, Statement.RETURN_GENERATED_KEYS);
        assertTrue(result);
    }

    @Test
    void testExecute_WithColumnIndexes_ShouldNotifyListener_AndDelegate() throws SQLException {
        when(mockStatement.execute(TEST_SQL, TEST_COLUMN_INDEXES)).thenReturn(true);
        boolean result = statementProxy.execute(TEST_SQL, TEST_COLUMN_INDEXES);
        verify(mockListener).executedQuery(TEST_SQL);
        verify(mockStatement).execute(TEST_SQL, TEST_COLUMN_INDEXES);
        assertTrue(result);
    }

    @Test
    void testExecute_WithColumnNames_ShouldNotifyListener_AndDelegate() throws SQLException {
        when(mockStatement.execute(TEST_SQL, TEST_COLUMN_NAMES)).thenReturn(true);
        boolean result = statementProxy.execute(TEST_SQL, TEST_COLUMN_NAMES);
        verify(mockListener).executedQuery(TEST_SQL);
        verify(mockStatement).execute(TEST_SQL, TEST_COLUMN_NAMES);
        assertTrue(result);
    }

    @Test
    void testExecuteLargeUpdate_String_ShouldNotifyListener_AndDelegate() throws SQLException {
        when(mockStatement.executeLargeUpdate(TEST_SQL)).thenReturn(TEST_LARGE_ROW_COUNT);
        long result = statementProxy.executeLargeUpdate(TEST_SQL);
        verify(mockListener).executedQuery(TEST_SQL);
        verify(mockStatement).executeLargeUpdate(TEST_SQL);
        assertEquals(TEST_LARGE_ROW_COUNT, result);
    }

    @Test
    void testExecuteLargeUpdate_WithAutoGeneratedKeys_ShouldNotifyListener_AndDelegate() throws SQLException {
        when(mockStatement.executeLargeUpdate(TEST_SQL, Statement.RETURN_GENERATED_KEYS)).thenReturn(TEST_LARGE_ROW_COUNT);
        long result = statementProxy.executeLargeUpdate(TEST_SQL, Statement.RETURN_GENERATED_KEYS);
        verify(mockListener).executedQuery(TEST_SQL);
        verify(mockStatement).executeLargeUpdate(TEST_SQL, Statement.RETURN_GENERATED_KEYS);
        assertEquals(TEST_LARGE_ROW_COUNT, result);
    }

    @Test
    void testExecuteLargeUpdate_WithColumnIndexes_ShouldNotifyListener_AndDelegate() throws SQLException {
        when(mockStatement.executeLargeUpdate(TEST_SQL, TEST_COLUMN_INDEXES)).thenReturn(TEST_LARGE_ROW_COUNT);
        long result = statementProxy.executeLargeUpdate(TEST_SQL, TEST_COLUMN_INDEXES);
        verify(mockListener).executedQuery(TEST_SQL);
        verify(mockStatement).executeLargeUpdate(TEST_SQL, TEST_COLUMN_INDEXES);
        assertEquals(TEST_LARGE_ROW_COUNT, result);
    }

    @Test
    void testExecuteLargeUpdate_WithColumnNames_ShouldNotifyListener_AndDelegate() throws SQLException {
        when(mockStatement.executeLargeUpdate(TEST_SQL, TEST_COLUMN_NAMES)).thenReturn(TEST_LARGE_ROW_COUNT);
        long result = statementProxy.executeLargeUpdate(TEST_SQL, TEST_COLUMN_NAMES);
        verify(mockListener).executedQuery(TEST_SQL);
        verify(mockStatement).executeLargeUpdate(TEST_SQL, TEST_COLUMN_NAMES);
        assertEquals(TEST_LARGE_ROW_COUNT, result);
    }

    @Test
    void testExecuteQuery_ShouldNotSwallowException() throws SQLException {
        SQLException expectedException = new SQLException("Connection lost");
        when(mockStatement.executeQuery(TEST_SQL)).thenThrow(expectedException);
        SQLException thrown = assertThrows(SQLException.class, () -> {
            statementProxy.executeQuery(TEST_SQL);
        });
        verify(mockListener).executedQuery(TEST_SQL);
        assertEquals(expectedException.getMessage(), thrown.getMessage());
    }

    @Test
    void verifyNoOtherInteractionsAfterExpectedCall() throws SQLException {
        when(mockStatement.executeQuery(TEST_SQL)).thenReturn(mockResultSet);
        statementProxy.executeQuery(TEST_SQL);
        verify(mockListener, times(1)).executedQuery(TEST_SQL);
        verify(mockStatement, times(1)).executeQuery(TEST_SQL);
        verifyNoMoreInteractions(mockListener);
        verifyNoMoreInteractions(mockStatement);
    }
}