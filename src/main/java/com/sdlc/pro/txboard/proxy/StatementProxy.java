package com.sdlc.pro.txboard.proxy;

import com.sdlc.pro.txboard.delegator.AbstractStatementDelegator;
import com.sdlc.pro.txboard.listener.TransactionPhaseListener;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public final class StatementProxy extends AbstractStatementDelegator {
    private final TransactionPhaseListener transactionPhaseListener;

    public StatementProxy(Statement statement, TransactionPhaseListener transactionPhaseListener) {
        super(statement);
        this.transactionPhaseListener = transactionPhaseListener;
    }

    @Override
    public ResultSet executeQuery(String sql) throws SQLException {
        this.transactionPhaseListener.executedQuery(sql);
        return super.executeQuery(sql);
    }

    @Override
    public int executeUpdate(String sql) throws SQLException {
        this.transactionPhaseListener.executedQuery(sql);
        return super.executeUpdate(sql);
    }

    @Override
    public boolean execute(String sql) throws SQLException {
        this.transactionPhaseListener.executedQuery(sql);
        return super.execute(sql);
    }

    @Override
    public void addBatch(String sql) throws SQLException {
        this.transactionPhaseListener.executedQuery(sql);
        super.statement.addBatch(sql);
    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        this.transactionPhaseListener.executedQuery(sql);
        return super.executeUpdate(sql, autoGeneratedKeys);
    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        this.transactionPhaseListener.executedQuery(sql);
        return super.executeUpdate(sql, columnIndexes);
    }

    @Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        this.transactionPhaseListener.executedQuery(sql);
        return super.executeUpdate(sql, columnNames);
    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        this.transactionPhaseListener.executedQuery(sql);
        return super.execute(sql, autoGeneratedKeys);
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        this.transactionPhaseListener.executedQuery(sql);
        return super.execute(sql, columnIndexes);
    }

    @Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        this.transactionPhaseListener.executedQuery(sql);
        return super.execute(sql, columnNames);
    }

    @Override
    public long executeLargeUpdate(String sql) throws SQLException {
        this.transactionPhaseListener.executedQuery(sql);
        return super.executeLargeUpdate(sql);
    }

    @Override
    public long executeLargeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        this.transactionPhaseListener.executedQuery(sql);
        return super.executeLargeUpdate(sql, autoGeneratedKeys);
    }

    @Override
    public long executeLargeUpdate(String sql, int[] columnIndexes) throws SQLException {
        this.transactionPhaseListener.executedQuery(sql);
        return super.executeLargeUpdate(sql, columnIndexes);
    }

    @Override
    public long executeLargeUpdate(String sql, String[] columnNames) throws SQLException {
        this.transactionPhaseListener.executedQuery(sql);
        return super.executeLargeUpdate(sql, columnNames);
    }
}
